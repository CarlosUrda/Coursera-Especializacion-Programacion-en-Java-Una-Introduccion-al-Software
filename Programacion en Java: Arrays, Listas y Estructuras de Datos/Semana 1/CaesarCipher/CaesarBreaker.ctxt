#BlueJ class context
comment0.params=chFreq
comment0.target=void\ setChFreq(char)
comment0.text=\n\ Cambiar\ la\ letra\ m\u00E1s\ frecuente\ del\ alfabeto.\n\ \n\ @param\ chFreq\ Nueva\ letra\ m\u00E1s\ frecuente\ en\ el\ alfabeto.\ Tiene\ que\ ser\ una\ de\ las\ letras\n\ presentes\ en\ el\ alfabeto.\n
comment1.params=
comment1.target=char\ getChFreq()
comment1.text=\n\ Obtener\ la\ letra\ m\u00E1s\ frecuente\ del\ alfabeto.\n\ \n\ @return\ Letra\ establecida\ como\ m\u00E1s\ frecuente\ en\ el\ alfabeto.\n
comment10.params=
comment10.target=void\ testDecryptTwoKeys()
comment10.text=\n\ Probar\ la\ funci\u00F3n\ decryptTwoKeys.\n
comment2.params=values
comment2.target=int\ maxIndex(int[])
comment2.text=\n\ Obtener\ el\ indice\ del\ elemento\ con\ mayor\ valor\ del\ array.\n\ \n\ @param\ values\ Array\ donde\ encontrar\ el\ elemento\ de\ mayor\ valor.\n\ @return\ \u00CDndice\ del\ elemento\ con\ el\ m\u00E1ximo\ valor\ del\ array.\n
comment3.params=input\ counts
comment3.target=int\ countLetters(java.lang.String,\ int[])
comment3.text=\n\ Contar\ el\ n\u00FAmero\ de\ letras\ del\ alfabeto\ en\ una\ cadena.\n\ \n\ @param\ input\ Cadena\ a\ contar\ el\ n\u00FAmero\ de\ letras..\n\ @param\ counts\ N\u00FAmero\ de\ palabras\ de\ cada\ longitud.\ El\ \u00EDndice\ de\ cada\ longitud\ viene\n\ dado\ por\ longitudPalabra-1\ \=>\ \u00CDndices\:\ [0,\ 1,\ 2,\ ...,\ longitudArray\ -1]\n\ @return\ 1\ Correcto;\ -1\ Error.\n
comment4.params=encrypted
comment4.target=int\ getKey(java.lang.String)
comment4.text=\n\ Obtener\ la\ clave\ usada\ para\ encriptar\ un\ texto.\n\ \n\ @param\ encrypted\ Texto\ encriptado.\n\ @return\ Clave\ usada\ para\ la\ encriptar\ el\ texto.\n
comment5.params=encrypted
comment5.target=java.lang.String\ decrypt(java.lang.String)
comment5.text=\n\ Desencriptar\ un\ texto\ encriptado\ mediante\ el\ m\u00E9todo\ de\ cifrado\ del\ C\u00E9sar.\n\ \n\ @param\ encrypted\ Texto\ a\ desencriptar.\n\ @return\ Cadena\ de\ texto\ desencriptada.\ Null\ si\ hay\ alg\u00FAn\ error.\n
comment6.params=message\ start
comment6.target=java.lang.String\ halfOfString(java.lang.String,\ int)
comment6.text=\n\ Obtener\ una\ cadena\ con\ los\ caracteres\ alternos\ a\ partir\ de\ una\ posici\u00F3n\ inicial.\n\ \n\ @param\ message\ Cadena\ de\ la\ cual\ obtener\ la\ nueva\ cadena.\n\ @param\ start\ \u00CDndice\ inicial\ en\ la\ cadena\ a\ partir\ del\ cual\ empezar\ a\ obtener\ caracteres\ \n\ alternos.\n\ @return\ Cadena\ con\ los\ caracteres\ alternos\ de\ la\ cadena\ original.\ Null\ si\ hay\ alg\u00FAn\ error.\n
comment7.params=encrypted
comment7.target=java.lang.String\ decryptTwoKeys(java.lang.String)
comment7.text=\n\ Desencriptar\ un\ texto\ encriptado\ mediante\ el\ m\u00E9todo\ de\ cifrado\ del\ C\u00E9sar\ con\ dos\ claves.\n\ \n\ @param\ encrypted\ Texto\ a\ desencriptar.\n\ @return\ Cadena\ de\ texto\ desencriptada.\ Null\ si\ hay\ alg\u00FAn\ error.\n
comment8.params=
comment8.target=void\ testDecrypt()
comment8.text=\n\ Probar\ la\ funci\u00F3n\ decrypt.\n
comment9.params=
comment9.target=void\ testHalfOfString()
comment9.text=\n\ Probar\ la\ funci\u00F3n\ halfOfString.\n
numComments=11
